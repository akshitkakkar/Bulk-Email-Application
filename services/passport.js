const passport = require('passport');
const keys = require('../config/keys');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose'); // avoids test run faliure
const User = mongoose.model('users'); //requiring like this to avoid test run faliure

//push to cookie
passport.serializeUser((user, done)=>{ //user here is what gets passed after oath success done function when either user is found or new user is created - line 31
    done(null, user.id); //this is the unique identifier automatically generated by mongo for each record
});

//pull from cookie
passport.deserializeUser((id, done)=>{
    User.findById(id)
    .then(user => {
        done(null, user);
    });
});

passport.use(new GoogleStrategy({
    clientID: keys.googleClientId,
    clientSecret: keys.googleClientSecret,
    callbackURL: '/auth/google/callback',
    proxy: true
}, async (accessToken, refreshToken, profile, done) =>{

// console.log('a', accessToken);
// console.log('r', refreshToken); //to refresh the access token
// console.log('p', profile);

    const existingUser = await User.findOne({googleId: profile.id});
    if(existingUser){
        return done(null, existingUser);
    }
    const user = await new User({googleId: profile.id}).save()
    done(null, user);
}));
//creates new instance of google passport strategy

